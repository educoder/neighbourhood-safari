// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  CK.Smartboard.View.Balloon = (function(_super) {

    __extends(Balloon, _super);

    function Balloon() {
      this.render = __bind(this.render, this);
      return Balloon.__super__.constructor.apply(this, arguments);
    }

    Balloon.prototype.initialize = function() {
      var _this = this;
      Balloon.__super__.initialize.call(this);
      Object.defineProperty(this, 'pos', {
        get: function() {
          return _this.$el.position();
        },
        set: function(pos) {
          return _this.$el.css({
            left: pos.left + 'px',
            top: pos.top + 'px'
          });
        }
      });
      Object.defineProperty(this, 'left', {
        get: function() {
          return _this.pos.left;
        },
        set: function(x) {
          return _this.$el.css('left', x + 'px');
        }
      });
      Object.defineProperty(this, 'top', {
        get: function() {
          return _this.pos.top;
        },
        set: function(y) {
          return _this.$el.css('top', y + 'px');
        }
      });
      Object.defineProperty(this, 'width', {
        get: function() {
          return _this.$el.outerWidth();
        },
        set: function(w) {
          return _this.$el.css('width', w + 'px');
        }
      });
      Object.defineProperty(this, 'height', {
        get: function() {
          return _this.$el.outerHeight();
        },
        set: function(h) {
          return _this.$el.css('height', h + 'px');
        }
      });
      Object.defineProperty(this, 'right', {
        get: function() {
          return _this.left + _this.width;
        },
        set: function(x) {
          return _this.$el.css('left', (x - _this.width) + 'px');
        }
      });
      Object.defineProperty(this, 'bottom', {
        get: function() {
          return _this.top + _this.height;
        },
        set: function(y) {
          return _this.$el.css('top', (y - _this.height) + 'px');
        }
      });
      this.model.on('change:published', function() {
        if (_this.model.get('published')) {
          _this.$el.addClass('new');
          setTimeout(function() {
            return _this.$el.removeClass('new');
          }, 1001);
          return _this.model.on('wakeful:broadcast:received', function() {
            if (!_this.$el.hasClass('glow')) {
              _this.$el.addClass('glow');
              return setTimeout(function() {
                return _this.$el.removeClass('glow');
              }, 4001);
            }
          });
        }
      });
      return this.model.on('change', function() {
        if (_this.wall != null) {
          return _this.render();
        }
      });
    };

    Balloon.prototype.isInDOM = function() {
      return jQuery.contains(document.documentElement, this.el);
    };

    Balloon.prototype.isPositioned = function() {
      var pos;
      pos = this.pos;
      return (pos.left != null) && pos.left > 0;
    };

    Balloon.prototype.render = function() {
      if (this.model.has('pos')) {
        this.pos = this.model.get('pos');
      }
      if (this.model.has('z-index')) {
        return this.$el.zIndex(this.model.get('z-index'));
      }
    };

    return Balloon;

  })(CK.Smartboard.View.Base);

  CK.Smartboard.View.ContributionBalloon = (function(_super) {

    __extends(ContributionBalloon, _super);

    ContributionBalloon.prototype.tagName = 'article';

    ContributionBalloon.prototype.className = 'contribution balloon';

    ContributionBalloon.prototype.id = function() {
      return this.domID();
    };

    ContributionBalloon.prototype.setColorClass = function(colorClass) {
      return this.colorClass = colorClass;
    };

    function ContributionBalloon(options) {
      this.renderBuildons = __bind(this.renderBuildons, this);

      this.renderTags = __bind(this.renderTags, this);

      this.renderConnectors = __bind(this.renderConnectors, this);

      this.render = __bind(this.render, this);

      this.toggleAnalysis = __bind(this.toggleAnalysis, this);

      this.resetView = __bind(this.resetView, this);

      this.processContributionByType = __bind(this.processContributionByType, this);

      this.handleClick = __bind(this.handleClick, this);

      this.setColorClass = __bind(this.setColorClass, this);

      this.id = __bind(this.id, this);
      ContributionBalloon.__super__.constructor.call(this, options);
      this.balloonContributionTypes = {
        "default": 'default',
        analysis: 'analysis',
        propose: 'propose',
        interpret: 'interpret'
      };
      this.ballonContributionType = this.balloonContributionTypes["default"];
      this.colorClass = "whiteGradient";
    }

    ContributionBalloon.prototype.initialize = function() {
      var _this = this;
      ContributionBalloon.__super__.initialize.call(this);
      return this.model.on('change:tags', function() {
        return _this.renderConnectors();
      });
    };

    ContributionBalloon.prototype.events = {
      'dblclick': 'handleClick'
    };

    ContributionBalloon.prototype.handleClick = function() {
      if (this.$el.hasClass('.ui-draggable-dragging')) {
        return;
      }
      return this.$el.toggleClass('opened');
    };

    ContributionBalloon.prototype.processContributionByType = function() {
      if (this.ballonContributionType === this.balloonContributionTypes.analysis) {
        return this.toggleAnalysis();
      }
    };

    ContributionBalloon.prototype.resetView = function() {
      var balloonID, balloonObj;
      balloonObj = jQuery(this.$el);
      balloonID = balloonObj.attr('id');
      if (this.ballonContributionType === this.balloonContributionTypes["default"]) {
        balloonObj.addClass(this.colorClass);
        return;
      }
      console.log('Reset Proposal Views');
      balloonObj.removeClass('opened').removeClass(this.colorClass);
      jQuery('#' + balloonID + ' .headline').hide();
      jQuery('#' + balloonID + ' .body').hide();
      jQuery('#' + balloonID + ' .meta').hide();
      return jQuery('#' + balloonID + ' img.balloon-note').fadeIn('fast');
    };

    ContributionBalloon.prototype.toggleAnalysis = function() {
      var balloonID, balloonObj;
      console.log('Toggle Analysis');
      balloonObj = jQuery(this.$el);
      balloonObj.toggleClass('balloon-note').toggleClass(this.colorClass);
      balloonID = balloonObj.attr('id');
      if (this.$el.hasClass('opened')) {
        jQuery('#' + balloonID + ' img.balloon-note').hide();
        jQuery('#' + balloonID + ' .headline').fadeIn('fast');
        jQuery('#' + balloonID + ' .body').fadeIn('fast');
        return jQuery('#' + balloonID + ' .meta').fadeIn('fast');
      } else {
        jQuery('#' + balloonID + ' .headline').hide();
        jQuery('#' + balloonID + ' .body').hide();
        jQuery('#' + balloonID + ' .meta').hide();
        return jQuery('#' + balloonID + ' img.balloon-note').fadeIn('fast');
      }
    };

    ContributionBalloon.prototype.render = function() {
      var body, headline, meta, nodeHeader;
      ContributionBalloon.__super__.render.call(this);
      if (this.model.get('published')) {
        this.$el.removeClass('unpublished');
      } else {
        this.$el.addClass('unpublished');
      }
      this.$el.addClass('contribution').addClass(this.colorClass);
      if (this.model.get('kind') === 'propose') {
        this.$el.addClass('synthesis');
      }
      nodeHeader = this.findOrCreate('.balloon-note', '<img style="display: none;" class="balloon-note" src="/smartboard/img/notes_large.png" alt="Note">');
      headline = this.findOrCreate('.headline', "<h3 class='headline'></h3>");
      headline.text(this.model.get('headline'));
      body = this.findOrCreate('.body', "<div class='body'></div>");
      if (this.model.get('content_type') === 'text') {
        body.text(this.model.get('content'));
      } else {
        body.text(this.model.get('content'));
      }
      meta = this.findOrCreate('.meta', "<div class='meta'><span class='author'></span></div>");
      meta.find('.author').text(this.model.get('author')).addClass("author-" + (this.model.get('author')));
      this.renderTags();
      this.renderBuildons();
      this.renderConnectors();
      return this;
    };

    ContributionBalloon.prototype.renderConnectors = function() {
      var connector, connectorId, connectorLength, connectorTransform, tag, tagId, tagView, x1, x2, y1, y2, _i, _len, _ref, _results;
      if (!this.model.has('tags') || _.isEmpty(this.model.get('tags')) || !this.$el.is(':visible')) {
        return;
      }
      _ref = this.model.get('tags');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tag = _ref[_i];
        tagId = tag.id.toLowerCase();
        tagView = this.wall.balloonViews[tagId];
        if (tagView == null) {
          continue;
        }
        connectorId = this.model.id + "-" + tagId;
        connector = CK.Smartboard.View.findOrCreate(this.wall.$el, "#" + connectorId, "<div class='connector' id='" + connectorId + "'></div>");
        x1 = this.left + (this.width / 2);
        y1 = this.top + (this.height / 2);
        x2 = tagView.left + (tagView.width / 2);
        y2 = tagView.top + (tagView.height / 2);
        connectorLength = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
        connectorTransform = "rotate(" + (Math.atan2(y2 - y1, x2 - x1) * 180 / Math.PI) + "deg)";
        connector.css({
          'top': "" + y1 + "px",
          'left': "" + x1 + "px",
          'width': "" + connectorLength + "px",
          '-webkit-transform': connectorTransform,
          '-moz-transform': connectorTransform,
          'transform': connectorTransform
        });
        connector.addClass("connects-" + this.model.id);
        connector.addClass("connects-" + tag.id);
        _results.push(connector.addClass("tag-" + tag.id));
      }
      return _results;
    };

    ContributionBalloon.prototype.renderTags = function() {
      var tag, tagIds, tid, _i, _len;
      if (!this.model.has('tags')) {
        return;
      }
      tagIds = (function() {
        var _i, _len, _ref, _results;
        _ref = this.model.get('tags');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          tag = _ref[_i];
          _results.push(tag.id);
        }
        return _results;
      }).call(this);
      this.$el.attr('data-tags', tagIds.join(" "));
      for (_i = 0, _len = tagIds.length; _i < _len; _i++) {
        tid = tagIds[_i];
        this.$el.addClass("tag-" + tid);
      }
      return this;
    };

    ContributionBalloon.prototype.renderBuildons = function() {
      var $b, b, buildons, changed, container, counter, _i, _len, _results;
      if (!this.model.has('build_ons')) {
        return;
      }
      buildons = this.model.get('build_ons');
      if (!buildons.length) {
        return;
      }
      container = this.findOrCreate('.buildons', "<div class='buildons'></div>");
      changed = false;
      if (buildons.length !== container.find('div.buildon').length) {
        changed = true;
      }
      container.children('div.buildon').remove();
      counter = CK.Smartboard.View.findOrCreate(this.$el.find('.meta'), '.buildon-counter', "<div class='buildon-counter'></div>");
      counter.html('');
      _results = [];
      for (_i = 0, _len = buildons.length; _i < _len; _i++) {
        b = buildons[_i];
        if (!b.published) {
          continue;
        }
        counter.append("•");
        $b = jQuery("                <div class='buildon'>                    <div class='author'></div>                    <div class='content'></div>                </div>            ");
        $b.find('.author').text(b.author);
        $b.find('.content').text(b.content);
        _results.push(container.append($b));
      }
      return _results;
    };

    return ContributionBalloon;

  })(CK.Smartboard.View.Balloon);

  CK.Smartboard.View.TagBalloon = (function(_super) {

    __extends(TagBalloon, _super);

    function TagBalloon() {
      this.render = __bind(this.render, this);

      this.renderConnectors = __bind(this.renderConnectors, this);

      this.setColorClass = __bind(this.setColorClass, this);

      this.id = __bind(this.id, this);
      return TagBalloon.__super__.constructor.apply(this, arguments);
    }

    TagBalloon.prototype.tagName = 'div';

    TagBalloon.prototype.className = 'tag balloon';

    TagBalloon.prototype.id = function() {
      return this.domID();
    };

    TagBalloon.prototype.initialize = function() {
      return TagBalloon.__super__.initialize.call(this);
    };

    TagBalloon.prototype.setColorClass = function(className) {
      return this.$el.addClass(className);
    };

    TagBalloon.prototype.events = {
      'click': 'handleClick'
    };

    TagBalloon.prototype.handleClick = function(ev) {
      var $el;
      $el = this.$el;
      if (this.$el.hasClass('.ui-draggable-dragging')) {
        return;
      }
      console.log('clicked tag..');
      if ($el.hasClass('active')) {
        Sail.app.wall.removeTagFilter(this.model);
        return $el.removeClass('active');
      } else {
        Sail.app.wall.addTagFilter(this.model);
        return $el.addClass('active');
      }
    };

    TagBalloon.prototype.renderConnectors = function() {
      var cv, taggedContributionViews, _i, _len, _results,
        _this = this;
      taggedContributionViews = _.filter(this.wall.balloonViews, function(bv) {
        return bv.model instanceof CK.Model.Contribution && bv.model.hasTag(_this.model);
      });
      _results = [];
      for (_i = 0, _len = taggedContributionViews.length; _i < _len; _i++) {
        cv = taggedContributionViews[_i];
        _results.push(cv.renderConnectors());
      }
      return _results;
    };

    TagBalloon.prototype.render = function() {
      var name;
      TagBalloon.__super__.render.call(this);
      this.$el.addClass('tag');
      name = this.findOrCreate('.name', "<h3 class='name'></h3>");
      name.text(this.model.get('name'));
      if (this.model.has('colorClassName')) {
        this.setColorClass(this.model.get('colorClassName'));
      }
      if (this.model.get('pinned')) {
        this.$el.addClass('pinned');
      } else {
        this.$el.removeClass('pinned');
      }
      this.renderConnectors();
      return this;
    };

    return TagBalloon;

  })(CK.Smartboard.View.Balloon);

}).call(this);

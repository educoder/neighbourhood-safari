// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CK.Smartboard.View.Wall = (function(_super) {

    __extends(Wall, _super);

    Wall.prototype.tagName = 'div';

    Wall.prototype.id = 'wall';

    Wall.prototype.tagFilters = [];

    Wall.prototype.wordCloudShowable = true;

    Wall.prototype.events = {
      'click #add-tag-opener': function(ev) {
        var addTagContainer,
          _this = this;
        if (this.tags.length < 4) {
          addTagContainer = this.$el.find('#add-tag-container');
          addTagContainer.toggleClass('opened');
          if (addTagContainer.hasClass('opened')) {
            return setTimeout(function() {
              return _this.$el.find('#new-tag').focus();
            }, 1000);
          }
        } else {
          return jQuery("#add-tag-opener").css({
            opacity: 0.4
          });
        }
      },
      'click #submit-new-tag': function(ev) {
        return this.submitNewTag();
      },
      'click #show-word-cloud': function(ev) {
        var wordCloudButton, _ref;
        wordCloudButton = jQuery('#show-word-cloud');
        if (this.wordCloudShowable) {
          wordCloudButton.addClass('disabled');
          wordCloudButton.text('Drawing Cloud... Please wait...');
          if ((_ref = this.wordCloud) == null) {
            this.wordCloud = new CK.Smartboard.View.WordCloud();
          }
          this.wordCloud.render();
          return this.wordCloudShowable = false;
        } else {
          this.wordCloud.hide();
          wordCloudButton.text('Show Word Cloud');
          return this.wordCloudShowable = true;
        }
      },
      'keydown #new-tag': function(ev) {
        if (ev.keyCode === 13) {
          return this.submitNewTag();
        }
      },
      'click #toggle-pause': function(ev) {
        var paused;
        paused = this.runState.get('paused');
        return this.runState.save({
          paused: !paused
        });
      },
      'click #go-tagging': function(ev) {
        return this.runState.save({
          phase: 'tagging'
        });
      },
      'click #go-propose': function(ev) {
        return this.runState.save({
          phase: 'propose'
        });
      },
      'click #go-interpret': function(ev) {
        return;
        return this.runState.save({
          phase: 'interpret'
        });
      }
    };

    function Wall(options) {
      this.changeWatermark = __bind(this.changeWatermark, this);

      this.unpause = __bind(this.unpause, this);

      this.pause = __bind(this.pause, this);

      this.submitNewTag = __bind(this.submitNewTag, this);

      this.render = __bind(this.render, this);

      this.addBalloon = __bind(this.addBalloon, this);
      this.runState = options.runState;
      this.tags = options.tags;
      this.contributions = options.contributions;
      Wall.__super__.constructor.call(this, options);
    }

    Wall.prototype.initialize = function() {
      var _this = this;
      Wall.__super__.initialize.call(this);
      this.runState.on('change', this.render);
      this.balloonViews = {};
      this.contributions.on('add', function(c) {
        return _this.addBalloon(c, CK.Smartboard.View.ContributionBalloon, _this.balloonViews);
      });
      this.contributions.each(function(c) {
        return _this.addBalloon(c, CK.Smartboard.View.ContributionBalloon, _this.balloonViews);
      });
      this.tags.on('add', function(t) {
        return _this.addBalloon(t, CK.Smartboard.View.TagBalloon, _this.balloonViews);
      });
      this.tags.each(function(t) {
        return _this.addBalloon(t, CK.Smartboard.View.TagBalloon, _this.balloonViews);
      });
      return this.tags.each(function(t) {
        return _this.balloonViews[t.id].renderConnectors();
      });
    };

    Wall.prototype.addBalloon = function(doc, view, balloonList) {
      var bv,
        _this = this;
      bv = new view({
        model: doc
      });
      doc.wake(Sail.app.config.wakeful.url);
      bv.$el.css('visibility', 'hidden');
      bv.wall = this;
      bv.render();
      this.$el.append(bv.$el);
      doc.on('change:pos', function() {
        return bv.pos = doc.get('pos');
      });
      doc.on('change:z-index', function() {
        return bv.$el.zIndex(doc.get('z-index'));
      });
      if (doc.has('pos')) {
        bv.pos = doc.get('pos');
      } else {
        this.assignRandomPositionToBalloon(doc, bv);
      }
      if (doc.has('z-index')) {
        bv.$el.zIndex(doc.get('z-index'));
      }
      this.makeBallonDraggable(doc, bv);
      bv.$el.click(function() {
        return _this.moveBallonToTop(doc, bv);
      });
      bv.render();
      doc.save().done(function() {
        return bv.$el.css('visibility', 'visible');
      });
      return balloonList[doc.id] = bv;
    };

    Wall.prototype.assignRandomPositionToBalloon = function(doc, view) {
      var left, top, wallHeight, wallWidth;
      wallWidth = this.$el.width();
      wallHeight = this.$el.height();
      left = Math.random() * (wallWidth - view.$el.outerWidth());
      top = Math.random() * (wallHeight - view.$el.outerHeight());
      doc.set('pos', {
        left: left,
        top: top
      });
      return this.moveBallonToTop(doc, view);
    };

    Wall.prototype.moveBallonToTop = function(doc, view) {
      var maxZ;
      maxZ = this.maxBallonZ();
      maxZ++;
      return doc.set('z-index', maxZ);
    };

    Wall.prototype.maxBallonZ = function() {
      return _.max(this.$el.find('.balloon').map(function(el) {
        return parseInt(jQuery(this).zIndex());
      }));
    };

    Wall.prototype.makeBallonDraggable = function(doc, view) {
      var _this = this;
      view.$el.draggable({
        distance: 30,
        containment: '#wall'
      }).css('position', 'absolute');
      view.$el.on('dragstop', function(ev, ui) {
        return doc.save({
          pos: ui.position
        }, {
          patch: true
        });
      });
      view.$el.on('drag', function(ev, ui) {
        if (view.renderConnectors != null) {
          return view.renderConnectors();
        }
      });
      return view.$el.on('dragstart', function(ev, ui) {
        return _this.moveBallonToTop(doc, view);
      });
    };

    Wall.prototype.addTagFilter = function(tag) {
      if (__indexOf.call(this.tagFilters, tag) < 0) {
        this.tagFilters.push(tag);
        return this.renderFiltered();
      }
    };

    Wall.prototype.removeTagFilter = function(tag) {
      this.tagFilters.splice(this.tagFilters.indexOf(tag), 1);
      return this.renderFiltered();
    };

    Wall.prototype.renderFiltered = function(tag) {
      var activeIds, maxZ, selector;
      if (this.tagFilters.length === 0) {
        return this.$el.find(".contribution, .connector").removeClass('blurred');
      } else {
        activeIds = (function() {
          var _i, _len, _ref, _results;
          _ref = this.tagFilters;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            tag = _ref[_i];
            _results.push(tag.id);
          }
          return _results;
        }).call(this);
        selector = ".tag-" + activeIds.join(", .tag-");
        this.$el.find(".contribution:not(" + selector + ")").addClass('blurred');
        this.$el.find(".connector:not(" + selector + ")").addClass('blurred');
        maxZ = this.maxBallonZ();
        this.$el.find(".contribution").filter("" + selector).removeClass('blurred').css('z-index', maxZ + 1);
        return this.$el.find(".connector").filter("" + selector).removeClass('blurred');
      }
    };

    Wall.prototype.render = function() {
      var paused, phase;
      phase = this.runState.get('phase');
      if (phase !== this.$el.data('phase')) {
        switch (phase) {
          case 'tagging':
            jQuery('body').removeClass('mode-brainstorm').addClass('mode-tagging').removeClass('mode-exploration').removeClass('mode-propose').removeClass('mode-research_and_experiment');
            this.changeWatermark("tagging");
            break;
          case 'exploration':
            jQuery('body').removeClass('mode-brainstorm').removeClass('mode-tagging').addClass('mode-exploration').removeClass('mode-propose').removeClass('mode-research_and_experiment');
            this.changeWatermark("exploration");
            break;
          case 'propose':
            jQuery('body').removeClass('mode-brainstorm').removeClass('mode-tagging').removeClass('mode-exploration').addClass('mode-propose').removeClass('mode-research_and_experiment');
            this.changeWatermark("propose");
            break;
          case 'research_and_experiment':
            jQuery('body').removeClass('mode-brainstorm').removeClass('mode-tagging').removeClass('mode-exploration').removeClass('mode-propose').addClass('mode-research_and_experiment');
            this.changeWatermark("experiment");
            break;
          default:
            jQuery('body').addClass('mode-brainstorm').removeClass('mode-tagging').removeClass('mode-exploration').removeClass('mode-propose').removeClass('mode-research_and_experiment');
            this.changeWatermark("brainstorm");
        }
        this.$el.data('phase', phase);
      }
      if (this.tags.length >= 4) {
        jQuery("#add-tag-opener").css({
          opacity: 0.4
        });
      }
      paused = this.runState.get('paused');
      if (paused !== this.$el.data('paused')) {
        if (paused) {
          this.pause();
        } else {
          this.unpause();
        }
        return this.$el.data('paused', paused);
      }
    };

    Wall.prototype.submitNewTag = function() {
      var newTag;
      newTag = this.$el.find('#new-tag').val();
      if (jQuery.trim(newTag).length < 2) {
        return;
      }
      Sail.app.createNewTag(newTag);
      this.$el.find('#add-tag-container').removeClass('opened').blur();
      return this.$el.find('#new-tag').val('');
    };

    Wall.prototype.pause = function() {
      this.$el.find('#toggle-pause').addClass('paused').text('Resume');
      if (this.$el.data('phase') !== 'evaluate') {
        jQuery('body').addClass('paused');
        return this.changeWatermark("Paused");
      }
    };

    Wall.prototype.unpause = function() {
      jQuery('body').removeClass('paused');
      this.$el.find('#toggle-pause').removeClass('paused').text('Pause');
      return this.changeWatermark(this.$el.data('phase') || "brainstorm");
    };

    Wall.prototype.changeWatermark = function(text) {
      return jQuery('#watermark').fadeOut(800, function() {
        return jQuery(this).text(text).fadeIn(800);
      });
    };

    return Wall;

  })(CK.Smartboard.View.Base);

}).call(this);
